# Примерное Условие:
# Дан список целых чисел A, отсортированный по неубыванию, необходимо за O(n) получить список с квадратами элементов
# списка А, отсортированный также по неубыванию. Пример результата в assert mainа.

# Решение:
# Использовать Алгоритм слияния отсортированных массивов с учетом того, что часть списка А с положительными числами
# уже отсортированна как надо, а остальная часть отсортированна в обратном порядке.


def square_sort(A):

    n = len(A) - 1
    res = [0 for i in range(len(A))]
    end = n
    i = 0
    j = 0

    while not((A[n-j] <= 0) or (A[i] > 0)):

        if abs(A[i]) <= A[n-j]:
            res[end] = (A[n-j]**2)
            j += 1
        else:
            res[end] = (A[i]**2)
            i += 1

        end -= 1

    if A[n-j] < 0:
        while end >= 0:
            res[end] = (A[i]**2)
            i += 1
            end -= 1

    if A[i] >= 0:
        while end >= 0:
            res[end] = (A[n-j]**2)
            j += 1
            end -= 1

    return res


if __name__ == "__main__":
    assert square_sort([-2, -1, -1, 1, 3]) == [1, 1, 1, 4, 9]
